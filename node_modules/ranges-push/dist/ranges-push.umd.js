/**
 * @name ranges-push
 * @fileoverview Gather string index ranges
 * @version 7.0.3
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/ranges-push/}
 */

"use strict";var rangesPush=(()=>{var y=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames,w=Object.getOwnPropertySymbols;var D=Object.prototype.hasOwnProperty,J=Object.prototype.propertyIsEnumerable;var b=(r,s,o)=>s in r?y(r,s,{enumerable:!0,configurable:!0,writable:!0,value:o}):r[s]=o,p=(r,s)=>{for(var o in s||(s={}))D.call(s,o)&&b(r,o,s[o]);if(w)for(var o of w(s))J.call(s,o)&&b(r,o,s[o]);return r};var j=(r,s)=>{for(var o in s)y(r,o,{get:s[o],enumerable:!0})},_=(r,s,o,n)=>{if(s&&typeof s=="object"||typeof s=="function")for(let a of x(s))!D.call(r,a)&&a!==o&&y(r,a,{get:()=>s[a],enumerable:!(n=I(s,a))||n.enumerable});return r};var W=r=>_(y({},"__esModule",{value:!0}),r);var R=(r,s,o)=>(b(r,typeof s!="symbol"?s+"":s,o),o);var k={};j(k,{Ranges:()=>E,defaults:()=>v,version:()=>H});function $(r,s=1){let o="\xA0";function n(e){return Array.from(e).reverse().join("")}function a(e,g,i){let l=i?`
`:"\r",t=i?"\r":`
`;if(!e)return e;let O=0,d=0,c="";for(let u=0,V=e.length;u<V;u++)(e[u]===l||e[u]===t&&e[u-1]!==l)&&d++,`\r
`.includes(e[u])||e[u]===o?(O=0,e[u]===o?c+=e[u]:e[u]===l?d<=g&&(c+=e[u],e[u+1]===t&&(c+=e[u+1],u++)):e[u]===t&&(e==null?void 0:e[u-1])!==l&&d<=g&&(c+=e[u])):(O++,!e[u+1]&&!d&&(c+=" "));return c}if(typeof r=="string"&&r.length){let e=1;typeof+s=="number"&&Number.isInteger(+s)&&+s>=0&&(e=+s);let g="",i="";if(!r.trim())g=r;else if(!r[0].trim()){for(let l=0,t=r.length;l<t;l++)if(r[l].trim()){g=r.slice(0,l);break}}if(r.trim()&&(r.slice(-1).trim()===""||r.slice(-1)===o)){for(let l=r.length;l--;)if(r[l].trim()){i=r.slice(l+1);break}}return`${a(g,e,!1)}${r.trim()}${n(a(n(i),e,!0))}`}return r}var F={strictlyTwoElementsInRangeArrays:!1,progressFn:null};function T(r,s){if(!Array.isArray(r)||!r.length)return r;let o=p(p({},F),s),n,a;if(o.strictlyTwoElementsInRangeArrays&&!r.every((i,l)=>!Array.isArray(i)||i.length!==2?(n=l,a=i.length,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${n}th range (${JSON.stringify(r[n],null,4)}) has not two but ${a} elements!`);if(!r.every((i,l)=>!Array.isArray(i)||!Number.isInteger(i[0])||i[0]<0||!Number.isInteger(i[1])||i[1]<0?(n=l,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${n}th range (${JSON.stringify(r[n],null,4)}) does not consist of only natural numbers!`);let e=r.length**2,g=0;return Array.from(r).sort((i,l)=>(o.progressFn&&(g+=1,o.progressFn(Math.floor(g*100/e))),i[0]===l[0]?i[1]<l[1]?-1:i[1]>l[1]?1:0:i[0]<l[0]?-1:1))}var A="7.0.3";var N={mergeType:1,progressFn:null,joinRangesThatTouchEdges:!0};function S(r,s){function o(t){return!!t&&typeof t=="object"&&!Array.isArray(t)}if(!Array.isArray(r)||!r.length)return null;let n;if(s)if(o(s)){if(n=p(p({},N),s),n.progressFn&&o(n.progressFn)&&!Object.keys(n.progressFn).length)n.progressFn=null;else if(n.progressFn&&typeof n.progressFn!="function")throw new Error(`ranges-merge: [THROW_ID_01] resolvedOpts.progressFn must be a function! It was given of a type: "${typeof n.progressFn}", equal to ${JSON.stringify(n.progressFn,null,4)}`);if(![1,2,"1","2"].includes(n.mergeType))throw new Error(`ranges-merge: [THROW_ID_02] resolvedOpts.mergeType was customised to a wrong thing! It was given of a type: "${typeof n.mergeType}", equal to ${JSON.stringify(n.mergeType,null,4)}`);if(typeof n.joinRangesThatTouchEdges!="boolean")throw new Error(`ranges-merge: [THROW_ID_04] resolvedOpts.joinRangesThatTouchEdges was customised to a wrong thing! It was given of a type: "${typeof n.joinRangesThatTouchEdges}", equal to ${JSON.stringify(n.joinRangesThatTouchEdges,null,4)}`)}else throw new Error(`emlint: [THROW_ID_03] the second input argument must be a plain object. It was given as:
${JSON.stringify(s,null,4)} (type ${typeof s})`);else n=p({},N);let a=r.filter(t=>Array.isArray(t)).map(t=>[...t]).filter(t=>t[2]!==void 0||t[0]!==t[1]),e,g,i;n.progressFn?e=T(a,{progressFn:t=>{i=Math.floor(t/5),i!==g&&(g=i,n.progressFn(i))}}):e=T(a);let l=e.length-1;for(let t=l;t>0;t--)n.progressFn&&(i=Math.floor((1-t/l)*78)+21,i!==g&&i>g&&(g=i,n.progressFn(i))),(e[t][0]<=e[t-1][0]||!n.joinRangesThatTouchEdges&&e[t][0]<e[t-1][1]||n.joinRangesThatTouchEdges&&e[t][0]<=e[t-1][1])&&(e[t-1][0]=Math.min(e[t][0],e[t-1][0]),e[t-1][1]=Math.max(e[t][1],e[t-1][1]),e[t][2]!==void 0&&(e[t-1][0]>=e[t][0]||e[t-1][1]<=e[t][1])&&e[t-1][2]!==null&&(e[t][2]===null&&e[t-1][2]!==null?e[t-1][2]=null:e[t-1][2]!=null?+n.mergeType==2&&e[t-1][0]===e[t][0]?e[t-1][2]=e[t][2]:e[t-1][2]+=e[t][2]:e[t-1][2]=e[t][2]),e.splice(t,1),t=e.length);return e.length?e:null}var H=A;function m(r){return r!=null}function h(r){return Number.isInteger(r)&&r>=0}function f(r){return typeof r=="string"}var v={limitToBeAddedWhitespace:!1,limitLinebreaksCount:1,mergeType:1},E=class{constructor(s){R(this,"ranges");R(this,"opts");let o=p(p({},v),s);if(o.mergeType&&o.mergeType!==1&&o.mergeType!==2)if(f(o.mergeType)&&o.mergeType.trim()==="1")o.mergeType=1;else if(f(o.mergeType)&&o.mergeType.trim()==="2")o.mergeType=2;else throw new Error(`ranges-push: [THROW_ID_02] opts.mergeType was customised to a wrong thing! It was given of a type: "${typeof o.mergeType}", equal to ${JSON.stringify(o.mergeType,null,4)}`);this.opts=o,this.ranges=[]}add(s,o,n){var g;if(s==null&&o==null)return;if(m(s)&&!m(o)){if(Array.isArray(s)){if(s.length){if(s.some(i=>Array.isArray(i))){s.forEach(i=>{Array.isArray(i)&&this.add(...i)});return}s.length&&h(+s[0])&&h(+s[1])&&this.add(...s)}return}throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_12] the first input argument, "from" is set (${JSON.stringify(s,null,0)}) but second-one, "to" is not (${JSON.stringify(o,null,0)})`)}else if(!m(s)&&m(o))throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_13] the second input argument, "to" is set (${JSON.stringify(o,null,0)}) but first-one, "from" is not (${JSON.stringify(s,null,0)})`);let a=+s,e=+o;if(h(n)&&(n=String(n)),h(a)&&h(e)){if(m(n)&&!f(n)&&!h(n))throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_08] The third argument, the value to add, was given not as string but ${typeof n}, equal to:
${JSON.stringify(n,null,4)}`);if(m(this.ranges)&&Array.isArray(this.last())&&a===this.last()[1]){if(this.last()[1]=e,this.last()[2],this.last()[2]!==null&&m(n)){let i=this.last()[2]&&this.last()[2].length&&(!((g=this.opts)!=null&&g.mergeType)||this.opts.mergeType===1)?`${this.last()[2]}${n}`:n;this.opts.limitToBeAddedWhitespace&&(i=$(i,this.opts.limitLinebreaksCount)),f(i)&&!i.length||(this.last()[2]=i)}}else{this.ranges||(this.ranges=[]);let i=n!==void 0&&!(f(n)&&!n.length)?[a,e,n&&this.opts.limitToBeAddedWhitespace?$(n,this.opts.limitLinebreaksCount):n]:[a,e];this.ranges.push(i)}}else throw h(a)&&a>=0?new TypeError(`ranges-push/Ranges/add(): [THROW_ID_10] "to" value, the second input argument, must be a natural number or zero! Currently it's of a type "${typeof e}" equal to: ${JSON.stringify(e,null,4)}`):new TypeError(`ranges-push/Ranges/add(): [THROW_ID_09] "from" value, the first input argument, must be a natural number or zero! Currently it's of a type "${typeof a}" equal to: ${JSON.stringify(a,null,4)}`)}push(s,o,n){this.add(s,o,n)}current(){return Array.isArray(this.ranges)&&this.ranges.length?(this.ranges=S(this.ranges,{mergeType:this.opts.mergeType}),this.ranges&&this.opts.limitToBeAddedWhitespace?this.ranges.map(s=>m(s[2])?[s[0],s[1],$(s[2],this.opts.limitLinebreaksCount)]:s):this.ranges):null}wipe(){this.ranges=[]}replace(s){if(Array.isArray(s)&&s.length)if(Array.isArray(s[0])&&h(s[0][0]))this.ranges=Array.from(s);else throw new Error(`ranges-push/Ranges/replace(): [THROW_ID_11] Single range was given but we expected array of arrays! The first element, ${JSON.stringify(s[0],null,4)} should be an array and its first element should be an integer, a string index.`);else this.ranges=[]}last(){return Array.isArray(this.ranges)&&this.ranges.length?this.ranges[this.ranges.length-1]:null}};return W(k);})();
/**
 * @name string-collapse-leading-whitespace
 * @fileoverview Collapse the leading and trailing whitespace of a string
 * @version 7.0.3
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/string-collapse-leading-whitespace/}
 */
/**
 * @name ranges-sort
 * @fileoverview Sort string index ranges
 * @version 6.0.3
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/ranges-sort/}
 */
